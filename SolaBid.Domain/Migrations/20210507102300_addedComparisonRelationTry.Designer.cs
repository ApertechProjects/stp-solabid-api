// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolaBid.Domain.Models.AppDbContext;

namespace SolaBid.Domain.Migrations
{
    [DbContext(typeof(SBDbContext))]
    [Migration("20210507102300_addedComparisonRelationTry")]
    partial class addedComparisonRelationTry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AdditionalPrivilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PrivilegeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalPrivileges");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApproveRoleName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ApproveRoles");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveRoleApproveStageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AmountFrom")
                        .HasColumnType("int");

                    b.Property<int>("AmountTo")
                        .HasColumnType("int");

                    b.Property<int>("ApproveRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ApproveStageDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproveRoleId");

                    b.HasIndex("ApproveStageDetailId");

                    b.ToTable("ApproveRoleApproveStageDetails");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApproveStageDetailName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ApproveStageMainId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproveStageMainId");

                    b.ToTable("ApproveStageDetails");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStageMain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApproveStageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EditedUserId");

                    b.ToTable("ApproveStageMains");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ApproveStatuses");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDComparison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BIDRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ComparisonNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BIDRequestId");

                    b.ToTable("BIDComparisons");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AZNTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApproveStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BIDComparisonId")
                        .HasColumnType("int");

                    b.Property<string>("BIDNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ComparisonChartPrepared")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("ComparisonDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ComparisonDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CurrentCurrTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DeliveryTerm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayementTerm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ProjectWarehouse")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("USDTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("WonStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproveStatusId");

                    b.HasIndex("BIDComparisonId");

                    b.HasIndex("SiteId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WonStatusId");

                    b.ToTable("BIDReferances");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BIDRequests");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupAdditionalPrivilege", b =>
                {
                    b.Property<int>("AdditionalPrivilegeId")
                        .HasColumnType("int");

                    b.Property<string>("AppRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdditionalPrivilegeId", "AppRoleId");

                    b.HasIndex("AppRoleId");

                    b.ToTable("GroupAdditionalPrivileges");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupApproveRole", b =>
                {
                    b.Property<string>("AppRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApproveRoleId")
                        .HasColumnType("int");

                    b.HasKey("AppRoleId", "ApproveRoleId");

                    b.HasIndex("ApproveRoleId");

                    b.ToTable("GroupApproveRoles");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupBuyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.ToTable("GroupBuyers");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<bool>("Export")
                        .HasColumnType("bit");

                    b.Property<int>("SubMenuId")
                        .HasColumnType("int");

                    b.Property<bool>("View")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("SubMenuId");

                    b.ToTable("GroupMenus");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupSiteWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("SiteId");

                    b.ToTable("GroupSiteWarehouses");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ParentMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ParentMenuName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ParentMenus");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.RELComparisonRequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BIDReferanceId")
                        .HasColumnType("int");

                    b.Property<string>("LineDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RowPointer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BIDReferanceId");

                    b.ToTable("RELComparisonRequestItems");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SiteDatabase")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.SubMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("SubLink")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubMenuName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("SubMenus");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastUpdateBy")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("PaymentTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("VendorBlackList")
                        .HasColumnType("bit");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.WonStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WonStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveRoleApproveStageDetail", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.ApproveRole", "ApproveRole")
                        .WithMany("ApproveRoleApproveStageDetails")
                        .HasForeignKey("ApproveRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.ApproveStageDetail", "ApproveStageDetail")
                        .WithMany("ApproveRoleApproveStageDetails")
                        .HasForeignKey("ApproveStageDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveRole");

                    b.Navigation("ApproveStageDetail");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStageDetail", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.ApproveStageMain", "ApproveStageMain")
                        .WithMany("ApproveStageDetails")
                        .HasForeignKey("ApproveStageMainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveStageMain");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStageMain", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SolaBid.Domain.Models.Entities.AppUser", "EditedUser")
                        .WithMany()
                        .HasForeignKey("EditedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("EditedUser");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AspNetUserRoles", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDComparison", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.BIDRequest", "BIDRequest")
                        .WithMany("BIDComparisons")
                        .HasForeignKey("BIDRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BIDRequest");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDReferance", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.ApproveStatus", "ApproveStatus")
                        .WithMany("BIDReferances")
                        .HasForeignKey("ApproveStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.BIDComparison", "BIDComparison")
                        .WithMany("BIDReferances")
                        .HasForeignKey("BIDComparisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.Site", "Site")
                        .WithMany("BIDReferances")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.Status", "Status")
                        .WithMany("BIDReferances")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.Vendor", "Vendor")
                        .WithMany("BIDReferances")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.WonStatus", "WonStatus")
                        .WithMany("BIDReferances")
                        .HasForeignKey("WonStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveStatus");

                    b.Navigation("BIDComparison");

                    b.Navigation("Site");

                    b.Navigation("Status");

                    b.Navigation("Vendor");

                    b.Navigation("WonStatus");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupAdditionalPrivilege", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AdditionalPrivilege", "AdditionalPrivilege")
                        .WithMany("GroupAdditionalPrivileges")
                        .HasForeignKey("AdditionalPrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", "AppRole")
                        .WithMany("GroupAdditionalPrivileges")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalPrivilege");

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupApproveRole", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", "AppRole")
                        .WithMany("GroupApproveRoles")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaBid.Domain.Models.Entities.ApproveRole", "ApproveRole")
                        .WithMany("GroupApproveRoles")
                        .HasForeignKey("ApproveRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("ApproveRole");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupBuyer", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", "AppRole")
                        .WithMany("GroupBuyers")
                        .HasForeignKey("AppRoleId");

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupMenu", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", "AppRole")
                        .WithMany()
                        .HasForeignKey("AppRoleId");

                    b.HasOne("SolaBid.Domain.Models.Entities.SubMenu", "SubMenu")
                        .WithMany()
                        .HasForeignKey("SubMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("SubMenu");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.GroupSiteWarehouse", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.AppRole", "AppRole")
                        .WithMany("GroupSiteWarehouses")
                        .HasForeignKey("AppRoleId");

                    b.HasOne("SolaBid.Domain.Models.Entities.Site", "Site")
                        .WithMany("GroupSiteWarehouses")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.RELComparisonRequestItem", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.BIDReferance", "BIDReferance")
                        .WithMany("RequestItems")
                        .HasForeignKey("BIDReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BIDReferance");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.SubMenu", b =>
                {
                    b.HasOne("SolaBid.Domain.Models.Entities.ParentMenu", "ParentMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AdditionalPrivilege", b =>
                {
                    b.Navigation("GroupAdditionalPrivileges");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.AppRole", b =>
                {
                    b.Navigation("GroupAdditionalPrivileges");

                    b.Navigation("GroupApproveRoles");

                    b.Navigation("GroupBuyers");

                    b.Navigation("GroupSiteWarehouses");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveRole", b =>
                {
                    b.Navigation("ApproveRoleApproveStageDetails");

                    b.Navigation("GroupApproveRoles");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStageDetail", b =>
                {
                    b.Navigation("ApproveRoleApproveStageDetails");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStageMain", b =>
                {
                    b.Navigation("ApproveStageDetails");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ApproveStatus", b =>
                {
                    b.Navigation("BIDReferances");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDComparison", b =>
                {
                    b.Navigation("BIDReferances");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDReferance", b =>
                {
                    b.Navigation("RequestItems");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.BIDRequest", b =>
                {
                    b.Navigation("BIDComparisons");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.ParentMenu", b =>
                {
                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.Site", b =>
                {
                    b.Navigation("BIDReferances");

                    b.Navigation("GroupSiteWarehouses");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.Status", b =>
                {
                    b.Navigation("BIDReferances");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.Vendor", b =>
                {
                    b.Navigation("BIDReferances");
                });

            modelBuilder.Entity("SolaBid.Domain.Models.Entities.WonStatus", b =>
                {
                    b.Navigation("BIDReferances");
                });
#pragma warning restore 612, 618
        }
    }
}
